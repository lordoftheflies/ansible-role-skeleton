# -*- mode: ruby -*-
# bump your IPs and include version when adding new boxes
# https://app.vagrantup.com/debian

  role = File.basename(File.expand_path(File.dirname(__FILE__)))
  gui = true
  ENV['VAGRANT_DEFAULT_PROVIDER'] = '{{ virtualization_provider }}'

  boxes = [
  {% for machine in platforms %}

    {
      :name => "{{ machine.name }}",
      :distribution => "{{ machine.distribution }}",
      :box => "{{ machine.box }}",
      :version => "{{ machine.version }}",
      :ip => '{{ machine.ip_address }}',
      :cpu => "{{ machine.cpu_count }}",
      :disk_size => "{{ machine.disk_size }}",
      :ram => "{{ machine.memory_size }}"
    }{% if not loop.last %},{% endif %}

  {% endfor %}

  ]

  Vagrant.configure("2") do |config|
    boxes.each do |box|

      {% if virtualization_provider == 'virtualbox' %}

      config.vbguest.auto_update = true
      # https://github.com/dotless-de/vagrant-vbguest
      # run something like this:
      mkdir ~/resources/sw/ubuntu/16.04/virtualbox/5.2.16
      wget http://download.virtualbox.org/virtualbox/5.2.16/VBoxGuestAdditions_5.2.16.iso
      # then the config.vbguest.iso_path below will work:
      config.vbguest.iso_path = "#{ENV['HOME']}/resources/sw/ubuntu/16.04/virtualbox/%{version}/VBoxGuestAdditions_%{version}.iso"
      config.vbguest.iso_upload_path = "/tmp"

      {% endif %}

      config.vm.define box[:name] do |vms|
        vms.vm.box = box[:box]
        vms.disksize.size = box[:disk_size]
        vms.vm.box_version = box[:version]
        vms.vm.guest = box[:distribution]
        vms.vm.hostname = box[:name]
        # vms.vm.synced_folder ".vagrant/synced", "/home/vagrant"

        {% if virtualization_provider == 'virtualbox' %}

        vms.vm.provider "virtualbox" do |vbox|
          vbox.gui = gui
          vbox.name = "#{role}-#{box[:name]}"
          vbox.customize ["modifyvm", :id, "--cpuexecutioncap", box[:cpu]]
          vbox.customize ["modifyvm", :id, "--memory", box[:ram]]
        end
        {% elif virtualization_provider == 'libvirt' %}
        config.vm.provider :libvirt do |libvirt|
            libvirt.qemu_use_session = true
            # libvirt.management_network_device = 'virbr0'
            libvirt.cpus = 2
            libvirt.cputopology :sockets => '2', :cores => '2', :threads => '1'
            libvirt.graphics_port = 5901
            libvirt.graphics_ip = '0.0.0.0'
            libvirt.video_type = 'qxl'
        end
        {% endif %}

        vms.vm.network :private_network, ip: box[:ip]

        vms.vm.provision "shell",
          inline: "echo 'up and running'"

        vms.vm.provision "vai" do |ansible|
          ansible.inventory_dir='tests/vagrant'
          ansible.inventory_filename='generated_inventory'
          ansible.groups = {
          {% for machine in machines %}
            '{{ machine.distribution }}' => [{% for release in machine.releases %} "{{ release }}", {% endfor %}]
          {% endfor %}
          }
        end

        vms.vm.provision "shell",
          inline: "echo 'system booted'"

        vms.vm.provision :ansible do |ansible|
          ansible.playbook = "tests/vagrant/site.yml"
          ansible.verbose = "vv"
        end
      end
    end
  end
end

# vi: set ft=ruby ts=2 sw=2 tw=0 et :